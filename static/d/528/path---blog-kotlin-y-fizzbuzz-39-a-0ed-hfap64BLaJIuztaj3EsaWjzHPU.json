{"data":{"markdownRemark":{"html":"<p><strong><a href=\"https://kotlinlang.org/\">Kotlin</a></strong>, es un lenguaje de programación creado por <strong>JetBrains</strong> que corre en la <strong>JVM</strong> (Java Virtual Machine) que se ha puesto de moda, <strong>Google</strong> le ha dado soporte oficial para Android y el framework web por excelencia de Java <strong>Spring</strong> también le da soporte. </p>\n<p>En esta entrada no me quiero meter en que se diferencia <strong>Kotlin</strong> de otros lenguajes sólo quiero plantear un caso práctico como es la kata de <strong>FizzBuzz</strong> y como lo he resuelto de 3 maneras diferentes. </p>\n<p>La kata de FizzBuzz se basa en lo siguiente. </p>\n<p>Si el número es divisible entre 3 el ordenador dirá <strong>\"Fizz\"</strong> </p>\n<p>Si el número es divisible entre 5 el ordenador dirá <strong>\"Buzz\"</strong> </p>\n<p>Si el número es divisible entre 3 y 5 el ordenador dirá <strong>\"FizzBuzz\"</strong> </p>\n<p>Sino el ordenador sacará el número por pantalla. </p>\n<p>La primera forma de hacerlo es la más imperativa de todos, tienes un for que empieza desde 1 hasta al 100. </p>\n<p>Luegas usas unos ifs que se cumplan las condiciones y las imprimes por pantalla.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">15</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FizzBuzz \\n\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fizz \\n\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Buzz\\n\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$i</span> \\n\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>La segunda manera de hacerlo puede ser la siguiente. </p>\n<p>Seguimos usando un for el cual por cada iteración llamada una función. </p>\n<p>Dentro de esa función llamamos a la estructura when que digamos para simplificar que funciona como un switch en cualquier otro lenguaje. </p>\n<p>Hacemos que se evalué siempre para que entre en la estructura de control y si se dan las condiciones irá imprimiendo los datos por pantalla.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printFizzBuzz</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">printFizzBuzz</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  item <span class=\"token operator\">%</span> <span class=\"token number\">15</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FizzBuzz \\n\"</span><span class=\"token punctuation\">)</span>\n  item <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fizz \\n\"</span><span class=\"token punctuation\">)</span>\n  item <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Buzz \\n\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$item</span>\\n\"</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La tercera y última manera por la cuál podemos mejorar nuestro código es la siguiente. </p>\n<p>Está la podría denominar la más próxima a la programación funcional. </p>\n<p>Utilizas un rango del 1 al 100 y utilizas un .map que va ir iterando el rango.</p>\n<p>La función .map usa una lambda y sin declarar variable se le puede pasar el número a la función que se usaba en el ejemplo 2. </p>\n<p>Si queréis probar el código, lo tienes muy fácil copias un trozo de código y lo pruebas en el siguiente enlace </p>\n<p><a href=\"https://try.kotlinlang.org/\">https://try.kotlinlang.org/</a> </p>\n<p>Ahí encontrarás un playground con una función main que es la que ejecuta tu código.</p>\n<h3>Fun Facts</h3>\n<ul>\n<li>Las funciones en Kotlin empiezan por fun \"Because functions are fun\"</li>\n<li><a href=\"https://blog.codinghorror.com/why-cant-programmers-program/\">Link interesante sobre FizzBuzz y las entrevistas de programación</a></li>\n<li><a href=\"https://www.genbetadev.com/desarrollo-aplicaciones-moviles/kotlin-la-maquina-virtual-de-java-tiene-un-nuevo-aliado\">Y en el siguiente enlace puedes leer más acerca del lenguaje</a></li>\n</ul>","frontmatter":{"title":"Kotlin y FizzBuzz","tags":["Kotlin"],"subtitle":"Un caso practico","featured_image":{"publicURL":"/static/kotlin-6acf3a2eb84c3fb6db7f9aac743dfcb6.jpg"}}}},"pageContext":{"pathSlug":"/kotlin-y-fizzbuzz/"}}